name: Create Kind Cluster

on: push

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
      - name: Kubectl describe nodes
        run: kubectl describe nodes
     # - name: Download Krateo CLI for AMD64
     #   run: curl -L https://github.com/krateoplatformops/krateo/releases/download/v1.3.6/krateo_1.3.6_linux_amd64.deb -o krateo_1.3.6_linux_amd64.deb
     # - name: Install Krateo CLI for AMD64
     #   run: sudo apt install ./krateo_1.3.6_linux_amd64.deb
     # - name: Krateo CLI version
     #   run: krateo version
     # - name: Install krateo
     #   run: krateo init
      - name: Install Crossplane
        run: |
          kubectl create namespace krateo-system
          helm repo add crossplane-stable https://charts.crossplane.io/stable
          helm repo update
          helm upgrade crossplane --namespace krateo-system crossplane-stable/crossplane --install --wait
      - name: Check Crossplane readiness
        run: |
          kubectl wait deployment -n krateo-system crossplane --for condition=Available=True --timeout=90s
          kubectl wait deployment -n krateo-system crossplane-rbac-manager --for condition=Available=True --timeout=90s
      - name: Install provider-kubernetes
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: pkg.crossplane.io/v1
          kind: Provider
          metadata:
            name: provider-kubernetes
          spec:
            package: xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.6.0
          EOF
      - name: Check provider-kubernetes Healthy condition
        run: kubectl wait provider.pkg.crossplane.io provider-kubernetes --for condition=Healthy=True --timeout=90s
      - name: Create serviceaccount for provider-kubernetes
        run: |
          SA=$(kubectl -n krateo-system get sa -o name | grep provider-kubernetes | sed -e 's|serviceaccount\/|krateo-system:|g')
          kubectl create clusterrolebinding provider-kubernetes-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"
      - name: Install provider-helm
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: pkg.crossplane.io/v1
          kind: Provider
          metadata:
            name: provider-helm
          spec:
            package: xpkg.upbound.io/crossplane-contrib/provider-helm:v0.13.0
          EOF
      - name: Check provider-helm Healthy condition
        run: kubectl wait provider.pkg.crossplane.io provider-helm --for condition=Healthy=True --timeout=90s
      - name: Create serviceaccount for provider-helm
        run: |
          SA=$(kubectl -n krateo-system get sa -o name | grep provider-helm | sed -e 's|serviceaccount\/|krateo-system:|g')
          kubectl create clusterrolebinding provider-helm-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"
      - name: Install provider-argocd-endpoint
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: pkg.crossplane.io/v1
          kind: Provider
          metadata:
            name: provider-argocd-endpoint
          spec:
            package: 'ghcr.io/krateoplatformops/provider-argocd-endpoint:v1.0.0'
            packagePullPolicy: IfNotPresent
          EOF
      - name: Check provider-argocd-endpoint Healthy condition
        run: kubectl wait provider.pkg.crossplane.io provider-argocd-endpoint --for condition=Healthy=True --timeout=90s
      - name: Install krateo-module-core configuration
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: pkg.crossplane.io/v1
          kind: Configuration
          metadata:
            name: krateo-module-core
          spec:
            package: ghcr.io/krateoplatformops/krateo-module-core:v1.1.1
            packagePullPolicy: IfNotPresent
            revisionActivationPolicy: Automatic
            revisionHistoryLimit: 1
          EOF
      - name: Check krateo-module-core configuration condition
        run: kubectl wait configuration.pkg.crossplane.io krateo-module-core --for condition=Healthy=True --timeout=90s
      - name: Kubectl get pkg
        run: kubectl get pkg
      - name: Install krateo-module-core with dummy domain
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: modules.krateo.io/v1
          kind: Core
          metadata:
            name: core
          spec:
            api:
              hostname: api
            app:
              hostname: app
            argo-cd:
              hostname: argocd
            domain: krateo.temp
            domainPort: 443
            namespace: krateo-system
            platform: kubernetes
            protocol: https
          EOF
      - name: Check krateo-module-core Ready condition
        run: kubectl wait core.modules.krateo.io core --for condition=Ready=True --timeout=300s
      - name: Get all pods
        if: always()
        run: kubectl get pods -A
      - name: Get krateo-module-core
        if: always()
        run: kubectl get core.modules.krateo.io/core -o yaml
      - name: Get managed
        if: always()
        run: kubectl get managed
      - name: Kubectl get pkg
        if: always()
        run: kubectl get pkg
      - name: Kubectl get composite
        if: always()
        run: kubectl get composite
      - name: Kubectl get argo-cd.core.modules.krateo.io/core-argocd
        if: always()
        run: kubectl get argo-cd.core.modules.krateo.io/core-argocd -o yaml
      - name: Kubectl get endpoint.argocd.krateo.io/core-argocd-argocd-endpoint
        if: always()
        run: kubectl get endpoint.argocd.krateo.io/core-argocd-argocd-endpoint -o yaml
